// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Setoran_API.NET.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20250424051112_make kodevoucher unique")]
    partial class makekodevoucherunique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Diskon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusPromo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TanggalAkhir")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TanggalMulai")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Diskon");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Mitra", b =>
                {
                    b.Property<int>("IdMitra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdMitra");

                    b.HasIndex("Id");

                    b.ToTable("Mitra");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Motor", b =>
                {
                    b.Property<int>("IdMotor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DiskonAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiskonPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("HargaHarian")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdMitra")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomorBPKB")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomorSTNK")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlatNomor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusMotor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Tahun")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Transmisi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdMotor");

                    b.HasIndex("IdMitra");

                    b.ToTable("Motor");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Pelanggan", b =>
                {
                    b.Property<int>("IdPelanggan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdPengguna")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomorSIM")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdPelanggan");

                    b.HasIndex("IdPengguna")
                        .IsUnique();

                    b.ToTable("Pelanggan");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Pembayaran", b =>
                {
                    b.Property<int>("IdPembayaran")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTransaksi")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetodePembayaran")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusPembayaran")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TanggalPembayaran")
                        .HasColumnType("TEXT");

                    b.HasKey("IdPembayaran");

                    b.HasIndex("IdTransaksi");

                    b.ToTable("Pembayaran");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Transaksi", b =>
                {
                    b.Property<int>("IdTransaksi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdMotor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPelanggan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TanggalMulai")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TanggalSelesai")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalHarga")
                        .HasColumnType("TEXT");

                    b.HasKey("IdTransaksi");

                    b.HasIndex("IdMotor");

                    b.HasIndex("IdPelanggan");

                    b.ToTable("Transaksi");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Ulasan", b =>
                {
                    b.Property<int>("IdUlasan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdMotor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPelanggan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TanggalUlasan")
                        .HasColumnType("TEXT");

                    b.HasKey("IdUlasan");

                    b.HasIndex("IdMotor");

                    b.HasIndex("IdPelanggan");

                    b.ToTable("Ulasan");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Voucher", b =>
                {
                    b.Property<int>("IdVoucher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("KodeVoucher")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NamaVoucher")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PersenVoucher")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusVoucher")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TanggalAkhir")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TanggalMulai")
                        .HasColumnType("TEXT");

                    b.HasKey("IdVoucher");

                    b.HasIndex("KodeVoucher")
                        .IsUnique();

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.VoucherUsed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPelanggan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdVoucher")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdPelanggan");

                    b.HasIndex("IdVoucher");

                    b.ToTable("VoucherUsed");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Pengguna", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Alamat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdGambar")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomorKTP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomorTelepon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TanggalLahir")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Umur")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Pengguna");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Mitra", b =>
                {
                    b.HasOne("Setoran_API.NET.Models.Pengguna", "Pengguna")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("Pengguna");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Motor", b =>
                {
                    b.HasOne("Setoran_API.NET.Models.Mitra", "Mitra")
                        .WithMany()
                        .HasForeignKey("IdMitra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mitra");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Pelanggan", b =>
                {
                    b.HasOne("Setoran_API.NET.Models.Pengguna", "Pengguna")
                        .WithOne("Pelanggan")
                        .HasForeignKey("Setoran_API.NET.Models.Pelanggan", "IdPengguna")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pengguna");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Pembayaran", b =>
                {
                    b.HasOne("Setoran_API.NET.Models.Transaksi", "Transaksi")
                        .WithMany()
                        .HasForeignKey("IdTransaksi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaksi");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Transaksi", b =>
                {
                    b.HasOne("Setoran_API.NET.Models.Motor", "Motor")
                        .WithMany()
                        .HasForeignKey("IdMotor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Setoran_API.NET.Models.Pelanggan", "Pelanggan")
                        .WithMany()
                        .HasForeignKey("IdPelanggan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motor");

                    b.Navigation("Pelanggan");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Ulasan", b =>
                {
                    b.HasOne("Setoran_API.NET.Models.Motor", "Motor")
                        .WithMany()
                        .HasForeignKey("IdMotor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Setoran_API.NET.Models.Pelanggan", "Pelanggan")
                        .WithMany()
                        .HasForeignKey("IdPelanggan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motor");

                    b.Navigation("Pelanggan");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.VoucherUsed", b =>
                {
                    b.HasOne("Setoran_API.NET.Models.Pelanggan", "Pelanggan")
                        .WithMany()
                        .HasForeignKey("IdPelanggan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Setoran_API.NET.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("IdVoucher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pelanggan");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Setoran_API.NET.Models.Pengguna", b =>
                {
                    b.Navigation("Pelanggan");
                });
#pragma warning restore 612, 618
        }
    }
}
